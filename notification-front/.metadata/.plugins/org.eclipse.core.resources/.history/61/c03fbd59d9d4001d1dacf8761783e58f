package com.thelast.pds.episen.notificationmanagerservice.mock;

import java.util.Date;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;

import com.thelast.pds.episen.notificationmanagerservice.producer.notification.service.NotificationWeather;

public class WeatherAlert implements Runnable {
    private static final Logger log = LoggerFactory.getLogger(WeatherAlert.class);
    private int normalInterval = 10; // normal interval between weather checks in seconds
    private int severeInterval = 5; // interval between weather checks during severe weather conditions in seconds
    private String location = "Creteil"; // location to check the weather for

    @Autowired
    private NotificationWeather notificationWeather = new NotificationWeather();

    @Override
    public void run() {
        runNormalScenario();
    }

    private void runNormalScenario() {
        while (true) {
            log.info("[{}] Checking weather for {}", new Date(), location);
            // Check if severe weather conditions exist randomly
            boolean severeConditions = (Math.random() < 0.1); // 10% chance of severe weather conditions
            if (severeConditions) {
                runSevereScenario();
                return;
            }
            try {
                Thread.sleep(normalInterval * 1000L); // Convert interval from seconds to milliseconds
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                log.error("Interrupted while running normal scenario", e);
            }
        }
    }

    private void runSevereScenario() {
        while (true) {
            log.info("[{}] Severe weather alert for {}", new Date(), location);
            notificationWeather.publishWeatherAlert("Severe weather conditions in " + location);
            // Wait for severe weather conditions to pass before returning to normal scenario
            boolean severeConditions = (Math.random() < 0.1); // 10% chance of severe weather conditions passing
            if (!severeConditions) {
                runNormalScenario();
                return;
            }
            try {
                Thread.sleep(severeInterval * 1000L); // Convert interval from seconds to milliseconds
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                log.error("Interrupted while running severe scenario", e);
            }
        }
    }
}