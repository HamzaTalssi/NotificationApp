package com.thelast.pds.episen.notificationmanagerservice.traffic.producer;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.amqp.core.AmqpAdmin;
import org.springframework.amqp.core.Message;
import org.springframework.amqp.core.MessageBuilder;
import org.springframework.amqp.core.MessageProperties;
import org.springframework.amqp.core.Queue;
import org.springframework.amqp.rabbit.connection.CachingConnectionFactory;
import org.springframework.amqp.rabbit.core.RabbitAdmin;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.thelast.pds.episen.notificationmanagerservice.configuration.NotificationConfiguration;

@RestController
@RequestMapping("")
public class NotificationTraffic {

    private static final Logger log = LoggerFactory.getLogger(NotificationTraffic.class);

	@Autowired
    private RabbitTemplate template = new RabbitTemplate();
    String queueName;
    
    public NotificationTraffic() {
    	this.queueName = NotificationConfiguration.QUEUE;
    	CachingConnectionFactory connectionFactory = new CachingConnectionFactory();
    	AmqpAdmin admin = new RabbitAdmin(connectionFactory);
    	admin.declareQueue(new Queue(queueName));
    	template = new RabbitTemplate(connectionFactory);
    	}

    //méthode permettant de publier sur la file et de gérer également la péremption
    public String publishEtat(String etat) {
    	MessageProperties properties = new MessageProperties();
        properties.setExpiration("10000"); // durée de vie de 10 secondes
        Message message = new Message(etat.getBytes(), properties);
        template.convertAndSend(queueName, message);
        return "Traffic state published";

    }

}
