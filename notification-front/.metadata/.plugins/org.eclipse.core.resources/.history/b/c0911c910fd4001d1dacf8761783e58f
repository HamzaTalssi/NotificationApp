package com.thelast.pds.episen.notificationmanagerservice.configuration;

import java.util.Date;
import java.util.concurrent.TimeUnit;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.amqp.core.Message;
import org.springframework.amqp.core.MessagePostProcessor;
import org.springframework.amqp.rabbit.core.RabbitTemplate;

public class ExpiredMessage implements MessagePostProcessor {

	private static final Logger log = LoggerFactory.getLogger(ExpiredMessage.class);

	private final long expirationTimeInMillis;

	private final RabbitTemplate rabbitTemplate;

	public ExpiredMessage(long expirationTimeInMillis, RabbitTemplate rabbitTemplate) {
		this.expirationTimeInMillis = expirationTimeInMillis;
		this.rabbitTemplate = rabbitTemplate;
	}

	@Override
	public Message postProcessMessage(Message message) {
		long ageInMillis = System.currentTimeMillis() - message.getMessageProperties().getTimestamp().getTime();
		if (ageInMillis >= expirationTimeInMillis) {
			log.info("Discarding expired message: {}", message);
			return null; // Discard the message
		} else {
			long delay = expirationTimeInMillis - ageInMillis;
			log.info("Delaying message for {} ms", delay);
			rabbitTemplate.convertAndSend(message.getMessageProperties().getReceivedExchange(),
					message.getMessageProperties().getReceivedRoutingKey(), message, m -> {
						m.getMessageProperties().setExpiration(String.valueOf(delay));
						return m;
					});
			return null; // to discard the original message
		}
	}
}
